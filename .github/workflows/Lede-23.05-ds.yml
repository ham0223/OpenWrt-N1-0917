name: Lede-23.05

on:
  repository_dispatch:
  workflow_dispatch:
  # 建议使用 workflow_dispatch 手动触发，而非定时，以节省资源
  # schedule:
  #   - cron: '0 16 * * 4' # UTC时间，对应北京时间的周五零点。如需使用，请取消注释

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: N1/Lede/LE-feeds.conf.default
  CONFIG_FILE: N1/Lede/2025-0916.config
  DIY_P1_SH: N1/Lede/diy-part1.sh
  DIY_P2_SH: N1/Lede/diy-part2.sh
  FILES: N1/Lede/files
  TZ: Asia/Shanghai
  # 使用内置的 GITHUB_TOKEN 足以完成上传 release 的操作，除非有跨仓库需求，否则可简化
  # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 这是默认存在的，无需在 secrets 中设置

jobs:
  build:
    runs-on: ubuntu-24.04
    # 策略：尽可能复用编译环境，但核心的源码更新和编译步骤必须运行
    strategy:
      matrix:
        # 如果需要为多个设备编译，可以在这里定义矩阵
        # device: [n1, r4s]
      fail-fast: false

    steps:
    - name: 创建并设置编译空间权限
      run: |
        sudo mkdir -p /workdir
        sudo chown -R "$USER:$GROUPS" /workdir

    - name: 最大化编译空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 2048 # 如果内存紧张，适当增加Swap可能有助于防止OOM
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: 检查服务器配置
      run: |
        echo "⚠️ 性能提示：云编译服务器性能有限，请谨慎选择插件，避免Node.js等重型组件。"
        echo "--------------------------系统信息--------------------------"
        echo "CPU: $(nproc) 核 | 型号: $(grep -m1 "model name" /proc/cpuinfo | cut -d: -f2 | sed 's/^[ \t]*//')"
        echo "内存: $(free -h | awk '/^Mem:/{print $2}')"
        echo "硬盘:"
        df -Th
        echo "--------------------------编译目录--------------------------"
        df -Th /workdir

    - name: 检查Actions代码
      uses: actions/checkout@v4
      with:
        path: repository # 将仓库代码检出到 repository 目录，与 /workdir 分开

    - name: 安装编译环境与依赖
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        sudo -E apt-get -qq install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        genisoimage git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev \
        libreadline-dev libssl-dev libtool llvm lrzsz msmtp ninja-build p7zip p7zip-full patch pkgconf \
        python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion \
        swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev
        # 清理缓存，节省空间
        sudo apt-get autoremove -y --purge
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/*
        sudo timedatectl set-timezone "$TZ"
        # 设置ccache，这是加速编译的关键
        echo "/workdir/ccache_dir" > /tmp/ccache_path
        echo "max_size = 5.0G" > /tmp/ccache_config
        # 显示最终磁盘状态
        echo "环境安装完毕，当前磁盘状态:"
        df -Th

    - name: 配置CCache
      run: |
        mkdir -p /workdir/ccache_dir
        echo "CCACHE_DIR=/workdir/ccache_dir" >> $GITHUB_ENV
        echo "CCACHE_CONFIGPATH=/tmp/ccache_config" >> $GITHUB_ENV
        echo "CCACHE_MAXSIZE=5G" >> $GITHUB_ENV
        # 将ccache加入到PATH最前面
        echo "/usr/lib/ccache" >> $GITHUB_PATH

    - name: 克隆源码
      id: clone_code
      working-directory: /workdir
      env:
        # 设置Git参数，避免无关历史记录，加快克隆
        GIT_CLONE_SPARSE: 1
        GIT_DEPTH: 1
      run: |
        # 使用浅克隆和稀疏检出（如果支持）来加快速度
        git clone --depth 1 --single-branch --branch "$REPO_BRANCH" "$REPO_URL" openwrt
        # 创建软链接到GITHUB_WORKSPACE，方便后续步骤访问
        ln -sf /workdir/openwrt "$GITHUB_WORKSPACE/openwrt"
        cd openwrt
        # 记录版本信息
        commit_info=$(git log -1 --format="%cd :: %s" --date=short)
        echo "useVersionInfo=$commit_info" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "BUILD_DATETIME=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

    - name: 应用自定义配置 (Part 1)
      run: |
        # 复制feeds配置文件
        [ -e "$FEEDS_CONF" ] && cp -f "$FEEDS_CONF" openwrt/feeds.conf.default
        # 执行第一部分自定义脚本
        chmod +x "$DIY_P1_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P1_SH"

    - name: 更新并安装Feeds
      run: |
        cd openwrt
        # 先更新，再安装
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 应用自定义配置 (Part 2)
      run: |
        # 复制文件目录和配置文件
        [ -e "$FILES" ] && cp -rf "$FILES" openwrt/files
        [ -e "$CONFIG_FILE" ] && cp -f "$CONFIG_FILE" openwrt/.config
        # 执行第二部分自定义脚本
        chmod +x "$DIY_P2_SH"
        cd openwrt
        "$GITHUB_WORKSPACE/$DIY_P2_SH"

    - name: 下载软件包
      id: download_packages
      run: |
        cd openwrt
        # 生成默认配置
        make defconfig
        # 并行下载，失败重试。这里是加速编译的关键预处理步骤
        make -j8 download || make -j8 download
        # 检查并删除无效的小文件（通常是下载失败的文件）
        find dl -size -1024c -delete
        echo "软件包下载完成，磁盘状态:"
        df -Th

    - name: 编译固件
      id: compile_firmware
      env:
        # 设置编译环境变量，控制编译过程
        # 使用所有可用核心进行编译
        MAKE_J: $(nproc)
        # 启用CCache加速
        CCACHE_DIR: /workdir/ccache_dir
        CCACHE_MAXSIZE: 5G
      run: |
        cd openwrt
        echo "开始编译，使用 $(nproc) 线程..."
        # 编译策略：第一次使用多线程，失败后减少线程数重试，最后详细模式
        make -j$(nproc) 2>&1 | tee build_log.txt || \
        make -j$(( $(nproc) / 2 )) 2>&1 | tee build_log_retry.txt || \
        make -j1 V=s 2>&1 | tee build_log_verbose.txt
        
        # 检查编译结果
        if [ -f bin/targets/*/*/*.tar.gz ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          # 提取设备名称
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "编译失败，最后100行日志:"
          tail -100 build_log*.txt
          exit 1
        fi

    - name: 整理编译输出
      if: success()
      run: |
        echo "编译完成，整理输出文件..."
        mkdir -p /workdir/upload/firmware /workdir/upload/config
        
        # 复制所有生成的固件文件
        cp openwrt/bin/targets/*/*/*.tar.gz /workdir/upload/firmware/ 2>/dev/null || true
        cp openwrt/bin/targets/*/*/*.img.gz /workdir/upload/firmware/ 2>/dev/null || true
        
        # 备份重要配置文件
        cp openwrt/.config /workdir/upload/config/ 2>/dev/null || true
        cp openwrt/feeds.conf.default /workdir/upload/config/ 2>/dev/null || true
        
        echo "输出文件列表:"
        find /workdir/upload -type f

    - name: 打包内核（使用N1专用打包）
      if: success()
      uses: unifreq/openwrt_packit@master
      env:
        OPENWRT_ARMVIRT: /workdir/upload/firmware/*.tar.gz
        PACKAGE_SOC: s905d
        KERNEL_AUTO_LATEST: true
        KERNEL_REPO_URL: https://github.com/breakingbadboy/OpenWrt
        KERNEL_VERSION_NAME: 6.6.y

    - name: 复制打包后的文件
      if: success()
      run: |
        # 将打包后的文件也复制到上传目录
        cp -r /opt/openwrt_packit/output/* /workdir/upload/firmware/ 2>/dev/null || true
        echo "最终文件列表:"
        ls -la /workdir/upload/firmware/

    - name: 发布到GitHub Release
      if: success()
      uses: softprops/action-gh-release@v1
      with:
        name: "OpenWrt-N1 → ${{ env.BUILD_DATE }}"
        tag: "N1-23.05_${{ env.BUILD_DATE }}"
        files: /workdir/upload/firmware/*
        body: |
          **编译信息**
          - 源码: ${{ env.REPO_URL }} (${{ env.REPO_BRANCH }})
          - 版本: ${{ env.useVersionInfo }}
          - 编译时间: ${{ env.BUILD_DATETIME }}
          
          **默认信息**
          - 管理地址: 192.168.123.2
          - 用户名: root
          - 密码: password
          
          **更新说明**
          - 2025-0418: 基础插件集合
          - 2025-0916: 同步上游更新
        draft: false
        prerelease: false

    - name: 清理工作空间
      if: always()
      run: |
        echo "清理前的磁盘使用情况:"
        df -Th
        # 保留ccache以供下次使用，但清理临时文件
        sudo rm -rf /workdir/openwrt/build_dir/* /workdir/openwrt/staging_dir/* /workdir/openwrt/tmp/*
        echo "清理后的磁盘使用情况:"
        df -Th

# 注意：删除旧运行记录和发布的步骤需要特殊的token权限，可能不适合所有仓库
# 如果需要这些功能，请确保已配置正确的secrets并取消注释以下内容
#    - name: 删除旧运行记录
#      uses: Mattraks/delete-workflow-runs@main
#      with:
#        retain_days: 3
#        keep_minimum_runs: 5
#        token: ${{ secrets.GITHUB_TOKEN }}
#
#    - name: 删除旧发布
#      uses: dev-drprasad/delete-older-releases@v0.2.3
#      with:
#        keep_latest: 3
#        delete_tag_pattern: 'N1-23.05_*'
#        token: ${{ secrets.GITHUB_TOKEN }}
