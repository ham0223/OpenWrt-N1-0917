name: Lede-23.05-ds

on:
  repository_dispatch:
  workflow_dispatch:

  #schedule:
   #- cron: 0 16 * * 4

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: N1/Lede/LE-feeds.conf.default
  CONFIG_FILE: N1/Lede/2025-0916.config
  DIY_P1_SH: N1/Lede/diy-part1.sh
  DIY_P2_SH: N1/Lede/diy-part2.sh
  OPTIMIZE_SH: N1/Lede/optimize-build.sh
  FILES: N1/Lede/files
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.MY_TOKEN }}
  CCACHE_DIR: /workdir/ccache
  CCACHE_MAXSIZE: 10G

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 180

    steps:
    - name: 设置编译环境
      run: |
        sudo mkdir -p /workdir /workdir/ccache
        sudo chown -R $USER:$GROUPS /workdir
        echo "CCACHE_DIR=$CCACHE_DIR" >> $GITHUB_ENV

    - name: 计算编译线程数
      run: |
        # 获取CPU核心数并计算最佳线程数（核心数-1）
        CPUS=$(nproc)
        MAKE_JOBS=$((CPUS > 1 ? CPUS - 1 : 1))
        echo "MAKE_JOBS=$MAKE_JOBS" >> $GITHUB_ENV
        echo "使用 $MAKE_JOBS 个线程进行编译"

    - name: 最大化编译空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 2048
        swap-size-mb: 2048
        build-mount-path: /workdir
        overprovision-lvm: 'true'
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'
        remove-docker-images: 'true'

    - name: 设置ccache缓存
      uses: actions/cache@v3
      with:
        path: /workdir/ccache
        key: ${{ runner.os }}-ccache-${{ hashFiles('**/config') }}
        restore-keys: |
          ${{ runner.os }}-ccache-

    - name: 安装编译依赖
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ccache
        sudo apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 clang cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
          git gperf libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev \
          libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev \
          libtool llvm lrzsz msmtp ninja-build p7zip-full patch pkgconf python3 python3-pyelftools \
          python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs \
          unzip vim wget xmlto xxd zlib1g-dev
        sudo timedatectl set-timezone "$TZ"
        ccache --set-config=max_size=$CCACHE_MAXSIZE
        ccache -z

    - name: 克隆源码
      working-directory: /workdir
      run: |
        git clone --depth=1 --single-branch $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "tag_name=$(date +%Y%m%d)" >> $GITHUB_ENV

    - name: 应用基础配置
      run: |
        [ -e $FEEDS_CONF ] && cp $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt && $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新并安装feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 应用自定义配置
      run: |
        [ -e $FILES ] && cp -r $FILES openwrt/files
        [ -e $CONFIG_FILE ] && cp $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt && $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 优化编译配置
      run: |
        [ -e $OPTIMIZE_SH ] && cp $OPTIMIZE_SH openwrt/
        chmod +x openwrt/optimize-build.sh
        cd openwrt && ./optimize-build.sh

    - name: 下载软件包
      run: |
        cd openwrt
        make defconfig
        make -j$MAKE_JOBS download
        find dl -size -1024c -delete
        echo "硬盘使用情况:"
        df -Th

    - name: 编译固件 (使用ccache)
      run: |
        cd openwrt
        export PATH="/usr/lib/ccache:$PATH"
        echo "使用 $MAKE_JOBS 个线程进行编译"
        time make -j$MAKE_JOBS || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        ccache -s

    - name: 整理输出文件
      if: success()
      run: |
        mkdir -p /workdir/upload
        find openwrt/bin/targets -name "*.tar.gz" -exec cp {} /workdir/upload/ \;
        echo "编译完成，文件已保存到 /workdir/upload/"

    - name: 清理磁盘空间
      if: (!cancelled())
      run: |
        echo "清理之前："
        df -hT
        mkdir openwrt-armvirt
        cp openwrt/bin/targets/*/*/*.tar.gz /workdir/upload/
        mv openwrt/bin/targets/*/*/*.tar.gz openwrt-armvirt/
        echo -e "\n"
        echo "列出空间占用前10的目录或文件："
        sudo du -h --max-depth=1 /workdir |sort -nr | head -10
        rm -rf /workdir/openwrt/
        echo -e "\n"
        echo "清理之后："
        df -hT
        echo -e "\n"
        echo "/workdir路径文件"
        ls -l
        
    - name: 打包内核
      uses: unifreq/openwrt_packit@master
      env:
        WHOAMI: ham
        OPENWRT_ARMVIRT: openwrt-armvirt/*.tar.gz
        PACKAGE_SOC: s905d
        KERNEL_AUTO_LATEST: true
        KERNEL_REPO_URL: breakingbadboy/OpenWrt
        KERNEL_VERSION_NAME: 6.6.y
        
    - name: 整理文件
      run: mv /opt/openwrt_packit/output/* /workdir/upload/

    - name: 发布固件
      uses: ncipollo/release-action@v1
      with:
        name: OpenWrt-N1 → ${{ env.DATE }}
        tag: N1-23.05_${{ env.tag_name }}
        artifacts: /workdir/upload/*
        allowUpdates: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
              ---  使用说明 ---
              
              源码: ${{ env.REPO_URL }}
              分支: ${{ env.REPO_BRANCH }}
              
              网关：192.168.123.2
              用户名：root
              密码：password
              
              更新说明：
              2025-0418：本固件所含插件，请看主页图片。
              2025-0919：同步上游的更新，测试DeepSeek优化效果。

    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 3
        keep_minimum_runs: 5
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 7
        delete_tags : true
        token: ${{ secrets.GITHUB_TOKEN }}
